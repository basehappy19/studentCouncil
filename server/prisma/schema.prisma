// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Department {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @db.Text
  color       String
  budget      Budget?
  leaderId    Int?       @unique
  leader      PartyList? @relation("LeaderToDepartments", fields: [leaderId], references: [id], onDelete: SetNull)

  @@index([leaderId])
}

model Budget {
  id           Int           @id @default(autoincrement())
  title        String
  description  String        @db.Text
  total        Float         @default(0)
  department   Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId Int?          @unique
  transactions Transaction[]
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Transaction {
  id           Int             @id @default(autoincrement())
  title        String
  description  String          @db.Text
  amount       Float
  budgetBefore Float
  budgetAfter  Float
  type         TransactionType
  byUserId     Int?
  byUser       User?           @relation("TransactionsCreated", fields: [byUserId], references: [id], onDelete: SetNull)
  editByUserId Int?
  editByUser   User?           @relation("TransactionsEdited", fields: [editByUserId], references: [id], onDelete: SetNull)
  budgetId     Int?
  budget       Budget?         @relation(fields: [budgetId], references: [id], onDelete: SetNull)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([byUserId])
}

enum CheckInType {
  NORMAL
  SICK_LEAVE
  PERSONAL_LEAVE
  NOT_CHECKED_IN
  ABSENT
  REQUEST_FOR_CHECK_IN
  FORGOT_TO_CHECK_IN
  HOLIDAY
  CLOSED_FOR_CHECK_IN
}

enum SkipType {
  NORMAL
  HOLIDAY
  CLOSED_FOR_CHECK_IN
}

model Setting {
  id               Int      @id @default(autoincrement())
  checkInOpen      Boolean  @default(true)
  checkInStartTime Int      @default(7)
  checkInEndTime   Int      @default(12)
  checkInStartDay  Int      @default(1)
  checkInEndDay    Int      @default(5)
  requestStartTime Int      @default(9)
  requestEndTime   Int      @default(12)
  byUserId         Int?
  ByUser           User?    @relation("SettingSystem", fields: [byUserId], references: [id], onDelete: SetNull)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([byUserId])
}

model SkipDay {
  id        Int      @id @default(autoincrement())
  date      DateTime
  type      SkipType
  reason    String?
  byUserId  Int?
  ByUser    User?    @relation("SkipDay", fields: [byUserId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([byUserId])
}

model User {
  id                    Int              @id @default(autoincrement())
  email                 String
  username              String
  password              String
  fullName              String
  displayName           String
  profile_image_full    String           @default("default-image-user_full.png")
  profile_image_128x128 String           @default("default-image-partyList_128x128.png")
  order                 Int
  sid                   Int
  accessId              Int?
  access                Access?          @relation(fields: [accessId], references: [id], onDelete: SetNull)
  partyListId           Int?             @unique
  partyList             PartyList?       @relation(fields: [partyListId], references: [id], onDelete: Cascade)
  checkIns              CheckIn[]
  works                 Work[]
  operatedWorks         WorkOperators[]
  transactionsCreated   Transaction[]    @relation("TransactionsCreated")
  transactionsEdited    Transaction[]    @relation("TransactionsEdited")
  settings              Setting[]        @relation("SettingSystem")
  createSkipDay         SkipDay[]        @relation("SkipDay")
  checkInRequests       CheckInRequest[]

  @@index([accessId, partyListId])
}

model Work {
  id          Int             @id @default(autoincrement())
  title       String
  description String          @db.Text
  postById    Int?
  postBy      User?           @relation(fields: [postById], references: [id], onDelete: SetNull)
  date        DateTime        @default(now())
  images      WorkImages[]
  operators   WorkOperators[]
  tags        TagInWorks[]
  updatedAt   DateTime        @updatedAt
  comments    CommentInWork[]

  @@index([postById])
}

model CommentInWork {
  id        Int      @id @default(autoincrement())
  workId    Int
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  name      String   @default("นักเรียน")
  message   String   @db.Text
  like      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workId])
}

model WorkImages {
  id     Int    @id @default(autoincrement())
  path   String
  workId Int
  work   Work   @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
}

model WorkOperators {
  id     Int   @id @default(autoincrement())
  userId Int?
  workId Int
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  work   Work  @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([userId, workId])
  @@index([userId, workId])
}

model WorkTag {
  id     Int          @id @default(autoincrement())
  title  String
  iconId Int?
  icon   Icon?        @relation(fields: [iconId], references: [id])
  works  TagInWorks[]

  @@index([iconId])
}

model Icon {
  id           Int                @id @default(autoincrement())
  name         String             @unique
  contributors IconContributors[]
  tags         IconTags[]
  categories   IconCategories[]
  workTags     WorkTag[]
  skills       Skill[]
}

model IconContributors {
  id            Int          @id @default(autoincrement())
  iconId        Int
  icon          Icon         @relation(fields: [iconId], references: [id], onDelete: Cascade)
  contributorId Int?
  contributor   Contributor? @relation(fields: [contributorId], references: [id], onDelete: SetNull)

  @@index([iconId, contributorId])
}

model IconTags {
  id     Int  @id @default(autoincrement())
  iconId Int
  icon   Icon @relation(fields: [iconId], references: [id], onDelete: Cascade)
  tagId  Int?
  tag    Tag? @relation(fields: [tagId], references: [id], onDelete: SetNull)

  @@index([iconId, tagId])
}

model IconCategories {
  id         Int           @id @default(autoincrement())
  iconId     Int
  icon       Icon          @relation(fields: [iconId], references: [id], onDelete: Cascade)
  categoryId Int?
  category   IconCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([iconId, categoryId])
}

model Contributor {
  id    Int                @id @default(autoincrement())
  name  String             @unique
  icons IconContributors[]
}

model Tag {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  icons IconTags[]
}

model IconCategory {
  id    Int              @id @default(autoincrement())
  name  String           @unique
  icons IconCategories[]
}

model TagInWorks {
  id     Int     @id @default(autoincrement())
  workId Int
  tagId  Int
  work   Work    @relation(fields: [workId], references: [id], onDelete: Cascade)
  tag    WorkTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([workId, tagId])
  @@index([workId, tagId])
}

model CheckInDay {
  id              Int              @id @default(autoincrement())
  dateTime        DateTime         @default(now())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  checkIns        CheckIn[]
  checkInRequests CheckInRequest[]
}

model CheckIn {
  id           Int         @id @default(autoincrement())
  attendTime   DateTime?
  type         CheckInType @default(NOT_CHECKED_IN)
  reason       String?
  userId       Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkInDayId Int
  checkInDay   CheckInDay  @relation(fields: [checkInDayId], references: [id], onDelete: Cascade)

  @@index([userId, checkInDayId])
}

enum CheckInRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model CheckInRequest {
  id            Int                  @id @default(autoincrement())
  userId        Int?
  user          User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  checkInDayId  Int
  checkInDay    CheckInDay           @relation(fields: [checkInDayId], references: [id], onDelete: Cascade)
  timeRequested DateTime
  status        CheckInRequestStatus @default(PENDING)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@index([userId, checkInDayId])
}

model Access {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text
  user        User[]
}

enum VoteType {
  PUBLIC
  SECRET
}

model Vote {
  id          Int            @id @default(autoincrement())
  title       String
  description String         @db.Text
  content     String
  refers      VoteRefer[]
  documents   VoteDocument[]
  result      VoteResult?
  type        VoteType       @default(PUBLIC)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Refer {
  id    Int         @id @default(autoincrement())
  name  String
  votes VoteRefer[]
}

model Document {
  id    Int            @id @default(autoincrement())
  name  String
  path  String
  votes VoteDocument[]
}

model VoteRefer {
  id      Int   @id @default(autoincrement())
  voteId  Int
  vote    Vote  @relation(fields: [voteId], references: [id], onDelete: Cascade)
  referId Int
  refer   Refer @relation(fields: [referId], references: [id], onDelete: Cascade)

  @@unique([voteId, referId])
  @@index([voteId, referId])
}

model VoteDocument {
  id         Int      @id @default(autoincrement())
  voteId     Int
  vote       Vote     @relation(fields: [voteId], references: [id], onDelete: Cascade)
  documentId Int
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([voteId, documentId])
  @@index([voteId, documentId])
}

model VoteResult {
  id             Int               @id @default(autoincrement())
  maxAttendeesId Int?              @unique
  maxAttendees   VoteMaxAttendees? @relation(fields: [maxAttendeesId], references: [id], onDelete: Cascade)
  agrees         VoteAgree[]
  disagrees      VoteDisagree[]
  abstains       VoteAbstain[]
  noVotes        NoVote[]
  voteId         Int               @unique
  vote           Vote              @relation(fields: [voteId], references: [id], onDelete: Cascade)

  @@index([maxAttendeesId, voteId])
}

model VoteMaxAttendees {
  id     Int         @id @default(autoincrement())
  number Int
  result VoteResult? @relation()
}

model VoteAgree {
  id          Int        @id @default(autoincrement())
  partyListId Int?
  partyList   PartyList? @relation(fields: [partyListId], references: [id], onDelete: SetNull)
  resultId    Int
  result      VoteResult @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([partyListId, resultId])
  @@index([partyListId, resultId])
}

model VoteDisagree {
  id          Int        @id @default(autoincrement())
  partyListId Int?
  partyList   PartyList? @relation(fields: [partyListId], references: [id], onDelete: SetNull)
  resultId    Int
  result      VoteResult @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([partyListId, resultId])
  @@index([partyListId, resultId])
}

model VoteAbstain {
  id          Int        @id @default(autoincrement())
  partyListId Int?
  partyList   PartyList? @relation(fields: [partyListId], references: [id], onDelete: SetNull)
  resultId    Int
  result      VoteResult @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([partyListId, resultId])
  @@index([partyListId, resultId])
}

model NoVote {
  id          Int        @id @default(autoincrement())
  partyListId Int?
  partyList   PartyList? @relation(fields: [partyListId], references: [id], onDelete: SetNull)
  reason      String?    @default("ไม่อยู่ลงคะแนน")
  resultId    Int
  result      VoteResult @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([partyListId, resultId])
  @@index([partyListId, resultId])
}

model PartyList {
  id                    Int                  @id @default(autoincrement())
  firstName             String
  middleName            String?
  lastName              String
  nickName              String
  fullName              String
  bio                   Bio?                 @relation(fields: [bioId], references: [id], onDelete: Cascade)
  bioId                 Int?                 @unique
  contacts              Contact[]
  rank                  String               @unique
  profile_image_full    String               @default("default-image-partyList.png")
  profile_image_128x128 String               @default("default-image-partyList_128x128.png")
  roles                 RoleForPartyList[]
  showInHomepage        Boolean              @default(false)
  order                 Int
  orderInHomepage       Int?
  support               Int                  @default(0)
  user                  User?
  voteAgrees            VoteAgree[]
  voteDisagrees         VoteDisagree[]
  voteAbstains          VoteAbstain[]
  noVotes               NoVote[]
  departmentsLeader     Department[]         @relation("LeaderToDepartments")
  messagesToPartyList   MessageToPartyList[]
}

model MessageToPartyList {
  id          Int       @id @default(autoincrement())
  partyListId Int
  partyList   PartyList @relation(fields: [partyListId], references: [id], onDelete: Cascade)
  message     String    @db.Text

  @@index([partyListId])
}

model Role {
  id      Int                @id @default(autoincrement())
  name    String
  parties RoleForPartyList[]
}

model RoleForPartyList {
  id          Int        @id @default(autoincrement())
  partyListId Int?
  partyList   PartyList? @relation(fields: [partyListId], references: [id], onDelete: SetNull)
  roleId      Int
  role        Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([partyListId, roleId])
  @@index([partyListId, roleId])
}

model Bio {
  id               Int                      @id @default(autoincrement())
  shortMessage     String
  classroom        String
  experiences      ExperienceOwnPartyList[]
  skills           SkillOwnPartyList[]
  messageToStudent String                   @db.Text
  partyList        PartyList?               @relation
}

model Experience {
  id     Int                      @id @default(autoincrement())
  title  String                   @db.Text
  owners ExperienceOwnPartyList[]
}

model ExperienceOwnPartyList {
  id           Int        @id @default(autoincrement())
  experienceId Int
  bioId        Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  bio          Bio        @relation(fields: [bioId], references: [id], onDelete: Cascade)

  @@unique([experienceId, bioId])
  @@index([experienceId, bioId])
}

model Skill {
  id     Int                 @id @default(autoincrement())
  name   String
  iconId Int?
  icon   Icon?               @relation(fields: [iconId], references: [id])
  owners SkillOwnPartyList[]
}

model SkillOwnPartyList {
  id      Int   @id @default(autoincrement())
  skillId Int
  bioId   Int
  skill   Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  bio     Bio   @relation(fields: [bioId], references: [id], onDelete: Cascade)

  @@index([skillId, bioId])
  @@unique([skillId, bioId])
}

model Contact {
  id          Int       @id @default(autoincrement())
  username    String?
  link        String
  partyListId Int
  partyList   PartyList @relation(fields: [partyListId], references: [id], onDelete: Cascade)
  platformId  Int
  platform    Platform  @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@unique([partyListId, platformId])
  @@index([partyListId, platformId])
}

model Platform {
  id       Int       @id @default(autoincrement())
  name     String
  icon     String
  contacts Contact[]
}

model Category {
  id             Int             @id @default(autoincrement())
  title          String
  icon           String?
  thumbnailImage String
  subCategories  SubCategories[]
  policies       Policy[]
}

model SubCategories {
  id            Int         @id @default(autoincrement())
  categoryId    Int
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategoryId Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@index([categoryId, subCategoryId])
}

model SubCategory {
  id            Int                 @id @default(autoincrement())
  title         String
  icon          String?
  policies      PolicySubCategory[]
  subCategories SubCategories[]
}

model Policy {
  id               Int                 @id @default(autoincrement())
  rank             String
  title            String
  thumbnailImage   String
  categoryId       Int
  category         Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  like             Int                 @default(0)
  isApproved       Boolean             @default(true)
  order            Int?
  subCategories    PolicySubCategory[]
  progresses       ProgressPolicy[]
  description      PolicyDescription?
  messagesToPolicy CommentPolicy[]

  @@index([categoryId])
}

model PolicyDescription {
  id       Int    @id @default(autoincrement())
  problem  String @db.Text
  offer    String @db.Text
  budget   String @db.Text
  policyId Int
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([policyId])
  @@index([policyId])
}

model CommentPolicy {
  id       Int    @id @default(autoincrement())
  policyId Int
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)
  message  String @db.Text

  @@index([policyId])
}

model PolicySubCategory {
  id            Int         @id @default(autoincrement())
  policyId      Int
  subCategoryId Int
  policy        Policy      @relation(fields: [policyId], references: [id], onDelete: Cascade)
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@unique([policyId, subCategoryId])
  @@index([policyId, subCategoryId])
}

model Status {
  id         Int              @id @default(autoincrement())
  name       String
  color      String
  step       Int?             @unique
  progresses ProgressPolicy[]
}

model ProgressPolicy {
  id          Int      @id @default(autoincrement())
  statusId    Int?
  policyId    Int
  description String   @db.Text
  startedAt   DateTime @default(now())
  status      Status?  @relation(fields: [statusId], references: [id], onDelete: SetNull)
  policy      Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@index([statusId, policyId])
}

model Announcement {
  id              Int                       @id @default(autoincrement())
  title           String
  content         String                    @db.Text
  timestamp       String
  createdAt       DateTime                  @default(now())
  order           Int
  schedules       ScheduleInAnnouncement[]
  links           LinkInAnnouncement[]
  iframes         IframeInAnnouncement[]
  images          ImageInAnnouncement[]
  newAnnouncement Boolean                   @default(true)
  highlighted     HighlightedAnnouncement[]
}

enum AnnouncementPriority {
  NORMAL
  IMPORTANT
  URGENT
  VERY_URGENT
}

model HighlightedAnnouncement {
  id             Int                  @id @default(autoincrement())
  content        String               @db.Text
  announcementId Int
  announcement   Announcement         @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  priority       AnnouncementPriority @default(NORMAL)
  createdAt      DateTime             @default(now())

  @@index([announcementId])
}

model ScheduleInAnnouncement {
  id             Int                  @id @default(autoincrement())
  scheduleId     Int
  schedule       AnnouncementSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  announcementId Int
  announcement   Announcement         @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, announcementId])
  @@index([scheduleId, announcementId])
}

model AnnouncementSchedule {
  id            Int                      @id @default(autoincrement())
  date          String
  time          String?
  activity      String?
  location      String?
  announcements ScheduleInAnnouncement[]
}

model LinkInAnnouncement {
  id             Int              @id @default(autoincrement())
  announcementId Int
  announcement   Announcement     @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  linkId         Int
  link           AnnouncementLink @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@unique([announcementId, linkId])
  @@index([announcementId, linkId])
}

model AnnouncementLink {
  id            Int                  @id @default(autoincrement())
  title         String               @db.Text
  url           String               @db.Text
  announcements LinkInAnnouncement[]
}

model AnnouncementIframe {
  id            Int                    @id @default(autoincrement())
  title         String                 @db.Text
  url           String                 @db.Text
  announcements IframeInAnnouncement[]
}

model IframeInAnnouncement {
  id             Int                @id @default(autoincrement())
  announcementId Int
  announcement   Announcement       @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  iframeId       Int
  iframe         AnnouncementIframe @relation(fields: [iframeId], references: [id], onDelete: Cascade)

  @@unique([announcementId, iframeId])
  @@index([announcementId, iframeId])
}

model AnnouncementImage {
  id            Int                   @id @default(autoincrement())
  title         String                @db.Text
  description   String                @db.Text
  path          String
  announcements ImageInAnnouncement[]
}

model ImageInAnnouncement {
  id             Int               @id @default(autoincrement())
  announcementId Int
  announcement   Announcement      @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  imageId        Int
  image          AnnouncementImage @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([announcementId, imageId])
  @@index([announcementId, imageId])
}

enum EventType {
  MEETING
  ACTIVITY
  IMPORTANT
  WORK
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String    @db.Text
  description String?   @db.Text
  date        DateTime
  time        String?
  location    String?
  eventType   EventType @default(WORK)
  createdAt   DateTime  @default(now())
}

model Location {
  id           Int               @id @default(autoincrement())
  name         String
  image        String
  subLocations SubLocation[]
  problems     ProblemLocation[]
}

model SubLocation {
  id         Int               @id @default(autoincrement())
  name       String
  image      String
  locationId Int
  location   Location          @relation(fields: [locationId], references: [id], onDelete: Cascade)
  rooms      Room[]
  problems   ProblemLocation[]

  @@index([locationId])
}

model Room {
  id            Int               @id @default(autoincrement())
  name          String
  image         String
  subLocationId Int
  subLocation   SubLocation       @relation(fields: [subLocationId], references: [id], onDelete: Cascade)
  problems      ProblemLocation[]

  @@index([subLocationId])
}

model Problem {
  id                Int              @id @default(autoincrement())
  title             String
  reportByStudentId Int?
  description       String           @db.Text
  solutionId        Int?
  solution          Solution?        @relation(fields: [solutionId], references: [id])
  reportedImages    ReportImage[]
  location          ProblemLocation?
  status            ProblemStatus    @default(PENDING)
  statusUpdatedAt   DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([solutionId])
  @@index([solutionId])
}

enum ProblemStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}

model ProblemLocation {
  id            Int          @id @default(autoincrement())
  problemId     Int
  problem       Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  locationId    Int
  location      Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  subLocationId Int?
  subLocation   SubLocation? @relation(fields: [subLocationId], references: [id], onDelete: Cascade)
  roomId        Int?
  room          Room?        @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([problemId])
  @@index([problemId, locationId, subLocationId])
}

model ReportImage {
  id        Int     @id @default(autoincrement())
  path      String
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Solution {
  id             Int             @id @default(autoincrement())
  title          String
  description    String          @db.Text
  resolvedImages ResolvedImage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Problem        Problem?
}

model ResolvedImage {
  id         Int      @id @default(autoincrement())
  path       String
  solutionId Int
  solution   Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([solutionId])
}
